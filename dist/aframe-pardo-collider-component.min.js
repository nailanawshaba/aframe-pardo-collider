"use strict";function _toConsumableArray(e){if(Array.isArray(e)){for(var t=0,i=Array(e.length);t<e.length;t++)i[t]=e[t];return i}return Array.from(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}(),ColliderComponent=function(){function e(){_classCallCheck(this,e),this.collidingElements=new Map,this.meshMap=new Map,this.collidableRef=".collidable",this.aframe()}return _createClass(e,[{key:"aframe",value:function(){var e=this;AFRAME.registerComponent("collider",{schema:{},init:function(){window.setTimeout(this.initialize.bind(this),1e3)},initialize:function(){var t=this,i=this.el.object3D.uuid;this.collideCheck={isColliding:!1},e.meshMap.set(i,Object.keys(this.el.object3DMap)),e.addElementToCollidingList(this.el,i),e.generateBoundingBox(this.el,i),this.el.addEventListener("componentchanged",function(n){if("position"===n.detail.name){var l=e.intersectedElements(t.el,i);l&&null!=l&&(!t.collideCheck.isColliding&&l.intersectedElements.length>0?(t.collideCheck.isColliding=!0,t.collideCheck.collisionResults=l,e.startColliding(l)):t.collideCheck.isColliding&&0===l.intersectedElements.length&&(t.collideCheck.isColliding=!1,e.endColliding(t.collideCheck.collisionResults),t.collideCheck.collisionResults=void 0))}})}})}},{key:"addElementToCollidingList",value:function(e,t){var i=this,n=this.meshMap.get(t),l=new Array;n.forEach(function(t){var n=e.getObject3D(t);n.vertices=i.calculateVertices(e,t),l.push({element:e,mesh:t,vertices:n.vertices})}),this.collidingElements.set(t,l)}},{key:"generateBoundingBox",value:function(e,t){this.meshMap.get(t).forEach(function(t){var i=e.getObject3D(t),n=(new THREE.Box3).setFromPoints(i.vertices);i.geometry.boundingBox=n})}},{key:"calculateVertices",value:function(e,t){e.parentElement.getAttribute("position");for(var i=e.getObject3D(t).geometry.attributes.position.array,n=new Array,l=0;l<i.length;l++){var o=i[3*l+0],r=i[3*l+1],s=i[3*l+2],a=new THREE.Vector3(o,r,s);n.push(a)}return n}},{key:"intersectedElements",value:function(e,t){var i=!1,n=new Array,l=this.getOtherElements(e,t);return this.meshMap.get(t).forEach(function(t){var o=e.getObject3D(t).geometry.boundingBox;if(o){var r=e.getObject3D(t).matrixWorld,s=o.clone().applyMatrix4(r);l.forEach(function(e){var t=e.element.getObject3D(e.mesh),l=t.geometry.boundingBox,o=t.matrixWorld,r=l.clone().applyMatrix4(o);(i=!!s.intersectsBox(r)||i)&&n.push(e.element)})}else console.log("No Bounding Box found")}),{intersectedElements:n,collidingElement:i?e:""}}},{key:"getOtherElements",value:function(e,t){var i=new Array;return this.collidingElements.forEach(function(e,n,l){n!==t&&i.push.apply(i,_toConsumableArray(e))}),i}},{key:"startColliding",value:function(e){this.emitCollide("collideStart",e),console.log("started colliding")}},{key:"endColliding",value:function(e){this.emitCollide("collideEnd",e)}},{key:"emitCollide",value:function(e,t){t.intersectedElements.forEach(function(i){i.emit(e,t)}),t.collidingElement.emit(e,t)}}]),e}();